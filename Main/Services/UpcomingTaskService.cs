namespace Crm.Services
{
	using Crm.Infrastructure;
	using Crm.Library.Data.Domain.DataInterfaces;
	using Crm.Library.Extensions;
	using Crm.Library.Globalization.Resource;
	using Crm.Library.Model;
	using Crm.Library.Model.Authorization.Interfaces;
	using Crm.Library.Model.Site;
	using Crm.Model;
	using Crm.Services.Interfaces;
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
	using System.Text.RegularExpressions;

	public class UpcomingTaskService : IUpcomingTaskService
	{
		protected readonly IAuthorizationManager authorizationManager;
		protected readonly IAbsolutePathHelper absolutePathHelper;
		protected readonly IResourceManager resourceManager;
		protected readonly IRepositoryWithTypedId<Task, Guid> taskRepository;
		protected readonly Func<Message> messageFactory;
		protected readonly IRepositoryWithTypedId<Message, Guid> messageRepository;
		protected readonly Site site;

		protected virtual StringBuilder GenerateHeadLine(StringBuilder sb, User user)
		{
			return sb.Append($"<p>{resourceManager.GetTranslation("Dear", user.DefaultLanguageKey)}")
				.Append($" {user.FirstName} {user.LastName}!</p>");
		}

		public virtual StringBuilder GenerateLink(StringBuilder sb, User user, LMobile.Unicore.Domain domain = null)
		{
			var hostUri = site.GetExtension<DomainExtension>().HostUri.ToString();
			var taskListUrl = "Home/MaterialIndex#/Main/TaskList/IndexTemplate" + (domain != null ? $"?domain={domain.UId}": "");
			var appUrl = string.Concat($"{Regex.Replace(hostUri, "^http", "lmobile")}", taskListUrl);
			var browserUrl = $"{hostUri.AppendIfMissing("/")}{taskListUrl}";
			sb.Append($"<a href={appUrl}>{resourceManager.GetTranslation("App", user.DefaultLanguageKey)}</a>");
			sb.Append($" <a href={browserUrl}>({resourceManager.GetTranslation("Browser", user.DefaultLanguageKey)})</a>");
			sb.AppendLine();

			return sb;
		} 

		protected virtual StringBuilder GenerateTextBlock(StringBuilder sb, User user, int todayTaskCount, int overdueTaskCount, LMobile.Unicore.Domain domain = null)
		{
			sb.AppendLine().AppendLine("<p>");
			sb.AppendLine($"<div>{string.Format(resourceManager.GetTranslation("UpcomingTasksBody", user.DefaultLanguageKey), todayTaskCount, overdueTaskCount)}</div>");
			sb.AppendLine($"<span>{resourceManager.GetTranslation("SeeYourTasks", user.DefaultLanguageKey)}</span>");
			return GenerateLink(sb, user).AppendLine("</p>");
		}

		public virtual string GenerateMessageBody(User user, int todayTaskCount, int overdueTaskCount)
		{
			var body = new StringBuilder();
			GenerateHeadLine(body, user);
			GenerateTextBlock(body, user, todayTaskCount, overdueTaskCount);
			body.AppendLine($"<p>{resourceManager.GetTranslation("AutoGeneratedMail", user.DefaultLanguageKey)}</p>");
			return body.ToString();
		}

		public virtual List<Task> GetTasksForToday(string username)
		{
			return taskRepository.GetAll().Where(x => !x.IsCompleted && x.ResponsibleUser == username && x.DueDate >= DateTime.Today && x.DueDate < DateTime.Today.AddDays(1)).ToList();
		}

		public virtual List<Task> GetOverdueTasks(string username)
		{
			return taskRepository.GetAll().Where(x => !x.IsCompleted && x.ResponsibleUser == username && x.DueDate < DateTime.Today).ToList();
		}

		public virtual void SaveMessage(User user, string messageBody)
		{
			var message = messageFactory();
			message.IsBodyHtml = true;
			message.Recipients.Add(user.Email);
			message.Subject = resourceManager.GetTranslation("UpcomingTasks", user.DefaultLanguageKey);
			message.Body = messageBody.ReplaceLineEndings("\n");
			message.CreateUser = "Upcoming Task Notifier";
			messageRepository.SaveOrUpdate(message);
		}

		public UpcomingTaskService(
			IAuthorizationManager authorizationManager,
			IAbsolutePathHelper absolutePathHelper,
			IResourceManager resourceManager,
			IRepositoryWithTypedId<Task, Guid> taskRepository,
			Func<Message> messageFactory,
			IRepositoryWithTypedId<Message, Guid> messageRepository,
			Site site)
		{
			this.authorizationManager = authorizationManager;
			this.absolutePathHelper = absolutePathHelper;
			this.resourceManager = resourceManager;
			this.taskRepository = taskRepository;
			this.messageFactory = messageFactory;
			this.messageRepository = messageRepository;
			this.site = site;
		}
	}
}
