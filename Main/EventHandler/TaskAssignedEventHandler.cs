namespace Crm.EventHandler
{
	using System;
	using System.Globalization;
	using System.Text;

	using Crm.Infrastructure;
	using Crm.Library.BaseModel.Interfaces;
	using Crm.Library.Data.Domain.DataInterfaces;
	using Crm.Library.Extensions;
	using Crm.Library.Globalization;
	using Crm.Library.Globalization.Resource;
	using Crm.Library.Model;
	using Crm.Library.Modularization.Events;
	using Crm.Library.Services.Interfaces;
	using Crm.Model;
	using Crm.Services.Interfaces;

	public class TaskAssignedEventHandler : IEventHandler<EntityCreatedEvent<Task>>, IEventHandler<EntityModifiedEvent<Task>>
	{
		private readonly IUserService userService;
		private readonly IRepositoryWithTypedId<Message, Guid> messageRepository;
		private readonly IAbsolutePathHelper pathHelper;
		private readonly IResourceManager resourceManager;
		private readonly IUpcomingTaskService upcomingTaskService;
		private readonly Func<Message> messageFactory;
		private readonly IRepositoryWithTypedId<Contact, Guid> contactRepository;

		public virtual void Handle(EntityCreatedEvent<Task> e)
		{
			var user = userService.CurrentUser;
			if (user == null)
			{
				return;
			}
			if (e.Entity.IsAssigned && user.Id != e.Entity.ResponsibleUser && !e.Entity.IsCompleted)
			{
				SendNotification(e.Entity, true);
			}
		}

		public virtual void Handle(EntityModifiedEvent<Task> e)
		{
			var user = userService.CurrentUser;
			if (user == null)
			{
				return;
			}
			if (e.Entity.IsAssigned && user.Id != e.Entity.ResponsibleUser && !e.Entity.IsCompleted)
			{
				SendNotification(e.Entity, false);
			}
		}

		protected virtual void SendNotification(Task task, bool isNewTask)
		{
			var recipient = userService.GetUser(task.ResponsibleUser);
			if (recipient == null)
			{
				return;
			}

			var message = messageFactory();
			message.Recipients.Add(recipient.Id);
			message.Subject = GetTaskNotificationSubject(task, recipient, isNewTask);
			message.Body = GetTaskNotificationBody(task, recipient);

			message.IsBodyHtml = true;
			message.CreateUser = task.ModifyUser;
			message.ModifyUser = task.ModifyUser;

			messageRepository.SaveOrUpdate(message);
		}

		protected virtual string GetTaskNotificationSubject(IEntity task, User recipient, bool isNewTask)
		{
			var user = userService.GetUser(task.ModifyUser);
			var subject = isNewTask
											? GetTranslation("AssignedTaskCreatedSubject", recipient.DefaultLanguage)
											: GetTranslation("AssignedTaskModifiedSubject", recipient.DefaultLanguage);
			return subject.Replace("{Task.ModifyUser}", user.DisplayName);
		}

		protected virtual string GetTaskNotificationBody(Task task, User recipient)
		{
			var lang = recipient.DefaultLanguage;
			var dateFormat = CultureInfo.CreateSpecificCulture(recipient.DefaultLanguage).DateTimeFormat.ShortDatePattern;
			var user = userService.GetUser(task.ModifyUser);
			var contact = task.Contact;
			if (task.Contact == null && task.ContactId.HasValue)
			{
				contact = contactRepository.Get(task.ContactId.Value);
			}

			var sb = new StringBuilder();

			if (contact != null)
			{
				sb.AppendFormatLine("<div>{0}: {1}</div>", GetTranslation("Contact", lang), contact.LegacyName);
				if (contact.ParentName.IsNotNullOrEmpty())
				{
					sb.AppendFormatLine("<div>{0}: {1}</div>", GetTranslation("Company", lang), contact.ParentName);
				}
			}

			if (task.DueDate.HasValue)
			{
				sb.AppendFormatLine("<div>{0}: {1}</div>", GetTranslation("Due", lang), task.DueDate.Value.ToString(dateFormat));
			}
			sb.AppendFormatLine("<div>{0}: {1}</div>", GetTranslation("Task", lang), task.Text);
			sb.AppendFormatLine("<div>{0}: {1}</div>", GetTranslation("AssignedBy", lang), user.DisplayName);

			sb.AppendLine("<p>");
			sb.AppendLine($"<span>{GetTranslation("SeeYourTasks", lang)}</span>");
			upcomingTaskService.GenerateLink(sb, user);
			sb.AppendLine("</p>");

			sb.AppendLine($"<p>{resourceManager.GetTranslation("AutoGeneratedMail", user.DefaultLanguageKey)}</p>");

			return sb.ToString();
		}

		protected virtual string GetTranslation(string key, Language language) => resourceManager.GetTranslation(key, language);

		public TaskAssignedEventHandler(IUserService userService, IRepositoryWithTypedId<Message, Guid> messageRepository, IAbsolutePathHelper pathHelper, IResourceManager resourceManager, Func<Message> messageFactory, IUpcomingTaskService upcomingTaskService, IRepositoryWithTypedId<Contact, Guid> contactRepository)
		{
			this.userService = userService;
			this.messageRepository = messageRepository;
			this.pathHelper = pathHelper;
			this.resourceManager = resourceManager;
			this.messageFactory = messageFactory;
			this.upcomingTaskService = upcomingTaskService;
			this.contactRepository = contactRepository;
		}
	}
}
