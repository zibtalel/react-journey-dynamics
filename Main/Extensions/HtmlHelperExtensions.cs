using Microsoft.AspNetCore.Html;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace Crm.Extensions
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Text;
	using Crm.Library.BaseModel.Interfaces;
	using Crm.Library.Extensions;
	using Crm.Library.Globalization.Resource;
	using Crm.Library.Helper;
	using Crm.Library.Model.Site;
	using Crm.Library.Validation;
	using Crm.ViewModels;

	public enum InputType
	{
		AutoCompleter,
		CheckBox,
		DatePicker,
		DropDownList,
		GenericListSelection,
		GroupDropDownList,
		Hidden,
		TextArea,
		TextBox
	}

	public static class HtmlHelperExtensions
	{
		public static IHtmlContent JsResource(this IHtmlHelper htmlHelper, string pluginName, string resourceSet) => htmlHelper.Raw(htmlHelper.GetUrlHelper().JsResource(pluginName, resourceSet));
		public static IHtmlContent JsResource(this IHtmlHelper htmlHelper, string resourceSet) => htmlHelper.Raw(htmlHelper.GetUrlHelper().JsResource(resourceSet));
		public static IHtmlContent CssResource(this IHtmlHelper htmlHelper, string resourceSet) => htmlHelper.Raw(htmlHelper.GetUrlHelper().CssResource("", resourceSet, WebExtensions.Media.None));
		public static IHtmlContent CssResource(this IHtmlHelper htmlHelper, string pluginName, string resourceSet) => htmlHelper.Raw(htmlHelper.GetUrlHelper().CssResource(pluginName, resourceSet, WebExtensions.Media.None));
		public static IHtmlContent CssResource(this IHtmlHelper htmlHelper, string resourceSet, WebExtensions.Media media) => htmlHelper.Raw(htmlHelper.GetUrlHelper().CssResource("", resourceSet, media));
		public static IHtmlContent CssResource(this IHtmlHelper htmlHelper, string pluginName, string resourceSet, WebExtensions.Media media) => htmlHelper.Raw(htmlHelper.GetUrlHelper().CssResource(pluginName, resourceSet, media));
		
		public static IHtmlContent RequiredMarker(this IHtmlHelper htmlHelper)
		{
			return htmlHelper.Raw("<span class=\"required-marker\">*</span>");
		}

		#region Logo

		public static IHtmlContent LogoOrTitleString(this IHtmlHelper htmlHelper)
		{
			var crmViewPage = htmlHelper.GetCrmViewPage();
			if (crmViewPage == null)
			{
				throw new ArgumentException($"ViewPage has to implement {nameof(ICrmViewPage)} to support Html.LogoOrTitleString");
			}

			var site = crmViewPage.CrmSite;
			return htmlHelper.Raw(site.GetExtension<DomainExtension>().MaterialLogo == null
							? site.Name
							: $"<img src='data:image/png;base64,{Convert.ToBase64String(site.GetExtension<DomainExtension>().MaterialLogo)}' alt='{site.Name}' id='logo' class='siteLogo' />");
		}

		#endregion

		#region DropDown

		public static IHtmlContent DropDownList<T>(this IHtmlHelper htmlHelper, string name, IEnumerable<T> items, Expression<Func<T, object>> valueExpression, Expression<Func<T, object>> textExpression, T selectedItem = null, object htmlAttributes = null)
			where T : class
		{
			var selectList = selectedItem == null
												? new SelectList(items, valueExpression.GetPropertyName(), textExpression.GetPropertyName())
												: new SelectList(items, valueExpression.GetPropertyName(), textExpression.GetPropertyName(), valueExpression.GetPropertyValueFor(selectedItem));

			var htmlAttributesDict = htmlAttributes.CreateRouteValueDictionary();
			if (htmlAttributesDict["autocomplete"] == null)
			{
				htmlAttributesDict.Add("autocomplete", "off");
			}
			htmlAttributesDict.AppendToValue("class", " form-control");

			return htmlHelper.DropDownList(name, selectList, htmlAttributesDict);
		}

		#endregion DropDown

		#region ValidationMessage

		//ToDo: Move this to Crm.Library
		private static IHtmlContent BuildErrorMessageTag(RuleViolation ruleViolation, IResourceManager resourceManager)
		{
			//if (ruleViolation.RuleType == null)
			//  return BuildErrorMessageTag(ruleViolation.ErrorMessage);
			return BuildErrorMessageTag(ruleViolation.GetTranslatedErrorMessage(resourceManager), ruleViolation.PropertyNameReplacementKey ?? ruleViolation.PropertyName, ruleViolation.RuleClass.ToString());
		}

		private static IHtmlContent BuildErrorMessageTag(string errorMessage, string propertyName = "Unknown", string ruleClass = "Unknown")
		{
			var tagBuilder = new TagBuilder("span");
			tagBuilder.AddCssClass("field-validation-error");
			tagBuilder.Attributes.Add("generated", "false"); // Not generated by the jQuery validation plugin
			tagBuilder.Attributes.Add("data-violated-rule", (propertyName + ruleClass).ToLower());
			tagBuilder.InnerHtml.Append(errorMessage);
			return tagBuilder;
		}

		public static IHtmlContent RuleViolationMessage(this IHtmlHelper htmlHelper)
		{
			var crmModel = htmlHelper.ViewData.Model as CrmModel;
			if (crmModel == null)
			{
				return HtmlString.Empty;
			}
			var crmViewPage = htmlHelper.GetCrmViewPage();
			if (crmViewPage == null)
			{
				throw new ArgumentException($"ViewPage has to implement {nameof(ICrmViewPage)} to support Html.RuleViolationMessage");
			}

			var ruleViolations = (from r in crmModel.RuleViolations
								  select r).ToList();
			if (!ruleViolations.Any())
			{
				return HtmlString.Empty;
			}
			var ruleViolation = ruleViolations.First();
			return BuildErrorMessageTag(ruleViolation, crmViewPage.ResourceManager); //ruleViolation.ErrorMessage, ruleViolation.DisplayRegion ?? ruleViolation.PropertyName);
		}

		public static IHtmlContent RuleViolationMessageRegion(this IHtmlHelper htmlHelper, string displayRegion)
		{
			var crmModel = htmlHelper.ViewData.Model as CrmModel;
			if (crmModel == null)
			{
				return HtmlString.Empty;
			}
			var crmViewPage = htmlHelper.GetCrmViewPage();
			if (crmViewPage == null)
			{
				throw new ArgumentException($"ViewPage has to implement {nameof(ICrmViewPage)} to support Html.RuleViolationMessageRegion");
			}

			var ruleViolations = (from r in crmModel.RuleViolations
								  where r.DisplayRegion == displayRegion
								  select r).ToList();

			if (!ruleViolations.Any())
			{
				return HtmlString.Empty;
			}

			var ruleViolation = ruleViolations.First();
			return BuildErrorMessageTag(ruleViolation, crmViewPage.ResourceManager); //ruleViolation.ErrorMessage, ruleViolation.DisplayRegion ?? ruleViolation.PropertyName);
		}

		#endregion

		public static IHtmlContent RenderAsHidden<TEntity>(this IHtmlHelper htmlHelper, TEntity entity, params Expression<Func<TEntity, object>>[] propertyExpressions)
		{
			return RenderAsHidden(htmlHelper, entity, null, true, propertyExpressions);
		}

		public static IHtmlContent RenderAsHidden<TEntity>(this IHtmlHelper htmlHelper, TEntity entity, string prefix = null, bool condition = true, params Expression<Func<TEntity, object>>[] propertyExpressions)
		{
			if (!condition)
			{
				return HtmlString.Empty;
			}

			var sb = new StringBuilder();

			foreach (Expression<Func<TEntity, object>> propertyExpression in propertyExpressions)
			{
				var propertyName = propertyExpression.GetPropertyName();
				var propertyValue = propertyExpression.GetPropertyValueFor(entity);
				// Warning: Do not replace by htmlHelper.Hidden because it can overwrite propertyValue with an entry from RouteValue if it has a key that equals propertyName
				var input = new TagBuilder("input");
				input.GenerateId(propertyName, "_");
				input.MergeAttribute("type", "hidden");
				input.MergeAttribute("name", prefix.IsNullOrEmpty() ? propertyName : "{0}.{1}".WithArgs(prefix, propertyName));
				input.MergeAttribute("value", propertyValue != null ? propertyValue.ToString() : String.Empty);
				sb.AppendLine(input.ToHtmlString().Value);
			}

			return htmlHelper.Raw(sb.ToString());
		}
	}
}
