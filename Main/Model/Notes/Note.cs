namespace Crm.Model.Notes
{
	using System;
	using System.Collections.Generic;
	using System.Linq;

	using Crm.Library.BaseModel;
	using Crm.Library.BaseModel.Interfaces;
	using Crm.Library.Model;

	public class Note : EntityBase<Guid>, IExportable, ISoftDelete, IEntityWithContactId
	{
		// Properties
		public virtual Guid? ContactId { get; set; }
		public virtual string ContactName { get { return Contact != null ? Contact.Name : null; } }
		public virtual string ContactType { get { return Contact != null ? Contact.ContactType : null; } }
		public virtual Contact Contact { get; set; }
		public virtual bool IsExported { get; set; }
		public virtual string LegacyId { get; set; }
		public virtual string ResponsibleUser { get; set; }
		public virtual string Subject { get; set; }
		public virtual string Text { get; set; }
		public virtual string Plugin { get; set; }
		/// <summary>
		/// Intended for declaring for which implementation of an abstract model that this note refers to.
		/// For example, a BaseOrder note is declared for the abstract base, and can be an Order or an Offer.
		/// This prevents code repetition for subtle changes in each implemetation.
		/// </summary>
		public virtual string Meta { get; set; }
		public virtual string NoteType { get; set; }
		public virtual ICollection<LinkResource> Links { get; set; }
		public virtual ICollection<FileResource> Files { get; set; }

		public virtual bool IsSystemGenerated { get; set; } = true;

		// The following properties are required for UI display and can be overwritten by the concrete note classes
		// (the concrete note classes have to derive from SystemGeneratedNote or UserGeneratedNote)
		// Note: It was intended to create two subclasses SystemGeneratedNote and UserGeneratedNote which have the properties specific
		// to notes generated by the user or the system. But due to an NHibernate bug this was not possible so all properties are defined in this base class
		// https://nhibernate.jira.com/browse/NH-2931
		public virtual string DisplayText { get { return Text; } }
		public virtual string PermanentLabelResourceKey { get { return null; } }
		public virtual string ImageVirtualUrl { get { return String.Empty; } }
		public virtual string ImageColor { get { return "#777777"; } }
		public virtual string ImageTextKey { get { return "Note"; } }
		public virtual string PermamentLinkVirtualUrl { get { return String.Empty; } }
		public virtual string NoteTitle { get { return "Note"; } }
		public virtual string Title { get; set; }
		public virtual string Link { get; set; }
		/// <summary>
		/// Additional entity Id information when Note is generated from a class not based
		/// from contact.
		/// </summary>
		public virtual Guid? EntityId { get; set; }
		public virtual string EntityName { get; set; }

		public virtual bool HasLinks
		{
			get { return Links.Count() > 0; }
		}
		public virtual bool HasFiles
		{
			get { return Files.Count() > 0; }
		}
		public virtual bool HasAttachments
		{
			get { return HasLinks || HasFiles; }
		}

		public virtual Type Type { get { return GetType(); } }
		public virtual User CreateUserObject { get; set; }
		public Note()
		{
			Links = new List<LinkResource>();
			Files = new List<FileResource>();
		}
	}
}
